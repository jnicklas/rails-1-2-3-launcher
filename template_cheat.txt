To apply the template, you need to provide rails generator with location of the template you wish to apply, using -m option :

rails blog -m ~/template.rb
rails blog -m http://gist.github.com/31208.txt

You can even apply templates to your existing Rails application using rails:template rake task and supplying LOCATION environment variable :

rake rails:template LOCATION=~/template.rb

api:

load_template(template)
file(filename, data = nil, log_action = true, &block)
plugin(name, options)
gem(name, options = {})
environment(data = nil, options = {}, &block)
git(command = {})
vendor(filename, data = nil, &block)
lib(filename, data = nil, &block)
rakefile(filename, data = nil, &block)
initializer(filename, data = nil, &block)
generate(what, *args)
run(command, log_action = true)
run_ruby_script(command, log_action = true)
rake(command, options = {})
capify!
freeze!(args = {})
route(routing_code)
ask(string)
inside(dir = '', &block)
in_root
yes?(question)
no?(question)
gsub_file(relative_destination, regexp, *args, &block)
append_file(relative_destination, data)
destination_path(relative_destination)


load_template("http://github.com/tsechingho/authlogic_bundle/raw/master/templates/git_init.rb")
load_template(template)

# Create a new file in the Rails project folder.  Specify the relative path from RAILS_ROOT
# file(filename, data = nil, log_action = true, &block)
file("lib/fun_party.rb") do
  hostname = ask("What is the virtual hostname I should use?")
   "vhost.name = #{hostname}"
end

# Install a plugin.  You must provide either a Subversion url or Git url.
# For a Git-hosted plugin, you can specify if it should be added as a submodule instead of cloned.
# def plugin(name, options)

plugin 'restful-authentication', :git => 'git://github.com/technoweenie/restful-authentication.git'
plugin 'restful-authentication', :git => 'git://github.com/technoweenie/restful-authentication.git', :submodule => true

# Adds an entry into config/environment.rb for the supplied gem :
def gem(name, options = {})

# Adds a line inside the Initializer block for config/environment.rb. Used by #gem
# If options :env is specified, the line is appended to the corresponding
# file in config/environments/#{env}.rb
def environment(data = nil, options = {}, &block)


# Run a command in git.
#
# ==== Examples
#
#   git :init
#   git :add => "this.file that.rb"
#   git :add => "onefile.rb", :rm => "badfile.cxx"
#
def git(command = {})

# Create a new file in the vendor/ directory. Code can be specified
# in a block or a data string can be given.
#
# ==== Examples
#
#   vendor("sekrit.rb") do
#     sekrit_salt = "#{Time.now}--#{3.years.ago}--#{rand}--"
#     "salt = '#{sekrit_salt}'"
#   end
#
#   vendor("foreign.rb", "# Foreign code is fun")
#
def vendor(filename, data = nil, &block)

# Create a new file in the lib/ directory. Code can be specified
# in a block or a data string can be given.
#
# ==== Examples
#
#   lib("crypto.rb") do
#     "crypted_special_value = '#{rand}--#{Time.now}--#{rand(1337)}--'"
#   end
#
#   lib("foreign.rb", "# Foreign code is fun")
#
def lib(filename, data = nil, &block)

# Create a new Rakefile with the provided code (either in a block or a string).
#
# ==== Examples
#
#   rakefile("bootstrap.rake") do
#     project = ask("What is the UNIX name of your project?")
#
#     <<-TASK
#       namespace :#{project} do
#         task :bootstrap do
#           puts "i like boots!"
#         end
#       end
#     TASK
#   end
#
#   rakefile("seed.rake", "puts 'im plantin ur seedz'")
#
def rakefile(filename, data = nil, &block)

# Create a new initializer with the provided code (either in a block or a string).
#
# ==== Examples
#
#   initializer("globals.rb") do
#     data = ""
#
#     ['MY_WORK', 'ADMINS', 'BEST_COMPANY_EVAR'].each do
#       data << "#{const} = :entp"
#     end
#
#     data
#   end
#
#   initializer("api.rb", "API_KEY = '123456'")
#
def initializer(filename, data = nil, &block)

# Generate something using a generator from Rails or a plugin.
# The second parameter is the argument string that is passed to
# the generator or an Array that is joined.
#
# ==== Example
#
#   generate(:authenticated, "user session")
#
def generate(what, *args)

# Executes a command
#
# ==== Example
#
#   inside('vendor') do
#     run('ln -s ~/edge rails)
#   end
#
def run(command, log_action = true)

# Executes a ruby script (taking into account WIN32 platform quirks)
def run_ruby_script(command, log_action = true)

# Runs the supplied rake task
#
# ==== Example
#
#   rake("db:migrate")
#   rake("db:migrate", :env => "production")
#   rake("gems:install", :sudo => true)
#
def rake(command, options = {})

# Just run the capify command in root
#
# ==== Example
#
#   capify!
#
def capify!

# Add Rails to /vendor/rails
#
# ==== Example
#
#   freeze!
#
def freeze!(args = {})

# Make an entry in Rails routing file conifg/routes.rb
#
# === Example
#
#   route "map.root :controller => :welcome"
#
def route(routing_code)

# Get a user's input
#
# ==== Example
#
#   answer = ask("Should I freeze the latest Rails?")
#   freeze! if ask("Should I freeze the latest Rails?") == "yes"
#
def ask(string)

# Do something in the root of the Rails application or
# a provided subfolder; the full path is yielded to the block you provide.
# The path is set back to the previous path when the method exits.
def inside(dir = '', &block)

def in_root
  FileUtils.cd(root) { yield }
end

# Helper to test if the user says yes(y)?
#
# ==== Example
#
#   freeze! if yes?("Should I freeze the latest Rails?")
#
def yes?(question)

# Helper to test if the user does NOT say yes(y)?
#
# ==== Example
#
#   capify! if no?("Will you be using vlad to deploy your application?")
#
def no?(question)
     
# Run a regular expression replacement on a file
#
# ==== Example
#
#   gsub_file 'app/controllers/application_controller.rb', /#\s*(filter_parameter_logging :password)/, '\1'
#
def gsub_file(relative_destination, regexp, *args, &block)

# Append text to a file
#
# ==== Example
#
#   append_file 'config/environments/test.rb', 'config.gem "rspec"'
#
def append_file(relative_destination, data)

def destination_path(relative_destination)
  File.join(root, relative_destination)
end


  
References:
http://github.com/rails/rails/blob/dd2eb1ea7c34eb6496feaf7e42100f37a8dae76b/railties/lib/rails_generator/generators/applications/app/template_runner.rb
http://m.onkey.org/2008/12/4/rails-templates